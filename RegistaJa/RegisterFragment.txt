package pt.ulusofona.deisi.cm2223.g21906899_21702200

import android.app.Activity
import android.app.AlertDialog
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.net.Uri
import android.os.Bundle
import android.provider.MediaStore
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import android.Manifest
import android.location.Geocoder
import com.example.projectcm.R
import com.example.projectcm.databinding.FragmentRegisterBinding
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import okhttp3.OkHttpClient
import pt.ulusofona.deisi.cm2223.g21906899_21702200.data.local.DatabaseApp
import pt.ulusofona.deisi.cm2223.g21906899_21702200.data.local.ProjectRoom
import pt.ulusofona.deisi.cm2223.g21906899_21702200.data.remote.ProjectOkHttp
import java.util.*


class RegisterFragment : Fragment() {
    private val REQUEST_IMAGE_CAPTURE = 1;
    private val REQUEST_IMAGE_PICK = 2;
    private var selectedImageUri: Uri? = null;
    private lateinit var room: ProjectRoom
    private lateinit var cinemaNames: MutableList<String>
    private var idCinema: Int = -1
    val registerList: MutableList<RegistrationData> = mutableListOf()
    private var imagem: Int = 0
    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private var currentLatitude: Double = 0.0
    private var currentLongitude: Double = 0.0
    private var locationString: String = ""

    private val LOCATION_PERMISSION_REQUEST_CODE = 123

    private val model = ProjectOkHttp(
        "https://www.omdbapi.com",
        "9ba860ad",
        OkHttpClient()
    )

    private lateinit var title: String
    private lateinit var id: String
    private lateinit var registaJa: String

    private lateinit var binding: FragmentRegisterBinding

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = FragmentRegisterBinding.inflate(inflater, container, false)
        val view = binding.root

        room = ProjectRoom(
            DatabaseApp.getInstance(requireContext()).cinemasDao(),
            DatabaseApp.getInstance(requireContext()).filmesDao(),
            DatabaseApp.getInstance(requireContext()).registoDao()
        )

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())

        if (isLocationPermissionGranted()) {
            // Permission already granted, get the last known location
            getLastKnownLocation()
        } else {
            // Request location permission
            requestLocationPermission()
        }

        room.getCinema { }

        room.getCinemaByName { result ->
            requireActivity().runOnUiThread {
                if (result.isSuccess) {
                    val cinemas = result.getOrNull()
                    cinemas?.let {
                        cinemaNames = it.toMutableList()
                        initializeSpinner(view)
                    }
                } else {
                    val exception = result.exceptionOrNull()
                    // Handle the error case
                }
            }
        }

        val rate = resources.getStringArray(R.array.Rate)
        val spinner2 = binding.spinner2
        if (spinner2 != null) {
            val adapter = ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, rate)
            spinner2.adapter = adapter

            spinner2.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
                override fun onItemSelected(
                    parent: AdapterView<*>,
                    view: View,
                    position: Int,
                    id: Long
                ) {
                    Toast.makeText(
                        requireContext(),
                        getString(R.string.selected_item) + " " + "" + rate[position],
                        Toast.LENGTH_SHORT
                    ).show()
                }

                override fun onNothingSelected(parent: AdapterView<*>) {
                    // write code to perform some action
                }
            }
        }

        val datePicker = binding.datePicker1
        val today = Calendar.getInstance()
        datePicker.init(
            today.get(Calendar.YEAR),
            today.get(Calendar.MONTH),
            today.get(Calendar.DAY_OF_MONTH)
        ) { view, year, month, day ->
            val msg = "You Selected: $day/$month/$year"
            Toast.makeText(context, msg, Toast.LENGTH_SHORT).show()
        }

        val btnGallery = binding.btnGallery
        btnGallery.setOnClickListener {
            dispatchPickImageIntent()
        }

        val btnSave = binding.registerButton
        btnSave.setOnClickListener {
            val name = binding.movieTitle.text.toString()
            val cinema = binding.spinnerCinemaLocation.selectedItem.toString()
            room.getCinemaId(cinema) { result ->
                if (result.isSuccess) {
                    val cinemaid = result.getOrNull()
                    if (cinemaid != null) {
                        idCinema = cinemaid


                        model.getFilmesById(id) { result ->
                            if (result.isSuccess) {
                                val filmes = result.getOrNull()
                                val rate = binding.spinner2.selectedItem.toString()
                                val datePicker = binding.datePicker1
                                val day = datePicker.dayOfMonth
                                if (day == today.get(Calendar.DAY_OF_MONTH) || day == today.get(
                                        Calendar.DAY_OF_MONTH
                                    ) - 1 || day == today.get(Calendar.DAY_OF_MONTH) - 2
                                ) {
                                    val month = datePicker.month + 1
                                    val year = datePicker.year

                                    val formattedDate =
                                        String.format("%02d/%02d/%04d", day, month, year)
                                    val observacoes = binding.movieObservations.text.toString()

                                    room.getCinemaPhotos(idCinema) { resposta ->
                                        if (resposta.isSuccess) {
                                            val imagens = resposta.getOrNull()
                                            if (imagens != null) {
                                                imagem = imagens.size
                                            } else {
                                                imagem = 0;
                                            }
                                        } else {
                                            println("Erro")
                                        }
                                    }
                                    println(locationString)

                                    room.getCinemaPostal(cinema) { res ->
                                        if (res.isSuccess) {
                                            val postalCode = res.getOrNull()
                                            registerList.add(
                                                RegistrationData(
                                                    0,
                                                    id,
                                                    idCinema,
                                                    name,
                                                    cinema,
                                                    rate,
                                                    formattedDate,
                                                    null,
                                                    imagem,
                                                    postalCode.toString(),
                                                    observacoes
                                                )
                                            )
                                            registerList.forEach { registrationData ->
                                                if (registrationData != null) {
                                                    room.insertRegistrationData(registrationData) {
                                                        if (result.isSuccess) {
                                                            println("saved")

                                                            if (filmes != null) {
                                                                room.insertFilmes(filmes) {
                                                                    if (result.isSuccess) {
                                                                        println("Saved")

                                                                        NavigationManager.goToSearch(
                                                                            parentFragmentManager
                                                                        )
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                } else {
                                    showPopup("Data inválida")
                                }
                            }
                        }

                    } else {
                        println("error")
                    }
                } else {
                    val exception = result.exceptionOrNull()
                }
            }
        }
        return view
    }

    private fun isLocationPermissionGranted(): Boolean {
        val permission = Manifest.permission.ACCESS_FINE_LOCATION
        return ContextCompat.checkSelfPermission(
            requireContext(),
            permission
        ) == PackageManager.PERMISSION_GRANTED
    }

    private fun requestLocationPermission() {
        val permission = Manifest.permission.ACCESS_FINE_LOCATION
        ActivityCompat.requestPermissions(
            requireActivity(),
            arrayOf(permission),
            LOCATION_PERMISSION_REQUEST_CODE
        )
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Location permission granted, get the last known location
                getLastKnownLocation()
            } else {
                // Location permission denied, handle the error case
                // You can show an error message or perform any other required action
            }
        }
    }

    private fun getLastKnownLocation() {
        try {
            fusedLocationClient.lastLocation
                .addOnSuccessListener { location ->
                    location?.let {
                        currentLatitude = it.latitude
                        currentLongitude = it.longitude

                        // Use the latitude and longitude values as needed
                        val geocoder = Geocoder(requireContext(), Locale.getDefault())
                        val addresses = geocoder.getFromLocation(
                            currentLatitude,
                            currentLongitude,
                            1
                        )

                        if (addresses?.isNotEmpty()==true) {
                            val address = addresses[0]
                            locationString = address.getAddressLine(0)
                            // Use the locationString as needed
                            binding.mylocation.text = locationString
                        }
                    }
                }
                .addOnFailureListener { exception ->
                    // Handle the exception
                }
        } catch (e: SecurityException) {
            e.printStackTrace()
            // Handle the security exception
        }
    }

    private fun showPopup(message: String) {
        requireActivity().runOnUiThread {
            val alertDialog = AlertDialog.Builder(requireContext())
                .setTitle("Só podemos registar filmes nas ultimas 48h")
                .setMessage(message)
                .setPositiveButton("OK") { dialog, _ ->
                    dialog.dismiss()
                }
                .create()

            alertDialog.show()
        }
    }


    private fun initializeSpinner(view: View) {
        val spinner = binding.spinnerCinemaLocation
        val adapter =
            ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, cinemaNames)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinner.adapter = adapter
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        arguments?.let {
            title = it.getString("title", "")

            id = it.getString("id", "")

            registaJa = it.getString("key", "")
            println(registaJa)


            binding.movieTitle.setText(title)
        }
    }

    private fun dispatchTakePictureIntent() {
        val takePictureIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        if (takePictureIntent.resolveActivity(requireActivity().packageManager) != null) {
            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE)
        }
    }

    private fun dispatchPickImageIntent() {
        val pickImageIntent =
            Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
        startActivityForResult(pickImageIntent, REQUEST_IMAGE_PICK)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (resultCode == Activity.RESULT_OK) {
            when (requestCode) {
                REQUEST_IMAGE_CAPTURE -> {
                    val imageBitmap = data?.extras?.get("data") as Bitmap
                    // Do something with the imageBitmap
                }
                REQUEST_IMAGE_PICK -> {
                    selectedImageUri = data?.data
                    // Do something with the selectedImageUri
                }
            }
        }
    }
}

